Vamos subir um banco em Docker com persistência, podendo escolher o tipo (MariaDB, MySQL 
ou PostgreSQL) e a porta. A forma mais prática é usar Docker Compose com profiles: você 
liga só o serviço do banco que quiser.

Crie uma pasta (ex.: db-stack/) e dentro dela salve estes dois arquivos:

compose.yaml:

    version: "3.9"

    name: dev-databases

    services:
    mariadb:
        image: mariadb:11
        container_name: mariadb11
        profiles: ["mariadb"]
        restart: unless-stopped
        environment:
        MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
        MARIADB_DATABASE: ${MARIADB_DATABASE}
        MARIADB_USER: ${MARIADB_USER}
        MARIADB_PASSWORD: ${MARIADB_PASSWORD}
        TZ: ${TZ}
        ports:
        - "${MARIADB_PORT:-3306}:3306"
        volumes:
        - mariadb_data:/var/lib/mysql
        healthcheck:
        test: ["CMD", "mariadb-admin", "ping", "-u", "root", "-p${MARIADB_ROOT_PASSWORD}"]
        interval: 10s
        timeout: 5s
        retries: 10

    mysql:
        image: mysql:8.4
        container_name: mysql84
        profiles: ["mysql"]
        restart: unless-stopped
        environment:
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        MYSQL_DATABASE: ${MYSQL_DATABASE}
        MYSQL_USER: ${MYSQL_USER}
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        TZ: ${TZ}
        ports:
        - "${MYSQL_PORT:-3306}:3306"
        volumes:
        - mysql_data:/var/lib/mysql
        healthcheck:
        test: ["CMD", "mysqladmin", "ping", "-proot"]
        interval: 10s
        timeout: 5s
        retries: 10

    postgres:
        image: postgres:16
        container_name: postgres16
        profiles: ["postgres"]
        restart: unless-stopped
        environment:
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_DB: ${POSTGRES_DB}
        TZ: ${TZ}
        ports:
        - "${POSTGRES_PORT:-5432}:5432"
        volumes:
        - postgres_data:/var/lib/postgresql/data
        healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
        interval: 10s
        timeout: 5s
        retries: 10

    volumes:
    mariadb_data:
    mysql_data:
    postgres_data:


.env:

    # Fuso
    TZ=America/Sao_Paulo

    # ----- MariaDB -----
    MARIADB_PORT=3308
    MARIADB_ROOT_PASSWORD=admin123
    MARIADB_DATABASE=appdb
    MARIADB_USER=app
    MARIADB_PASSWORD=app123

    # ----- MySQL -----
    MYSQL_PORT=3307
    MYSQL_ROOT_PASSWORD=admin123
    MYSQL_DATABASE=appdb
    MYSQL_USER=app
    MYSQL_PASSWORD=app123

    # ----- PostgreSQL -----
    POSTGRES_PORT=5433
    POSTGRES_PASSWORD=admin123
    POSTGRES_USER=app
    POSTGRES_DB=appdb

Altere as senhas antes de usar em ambiente real.


                                    Como subir (escolhendo o tipo de banco)

. MariaDB:

    docker compose --profile mariadb up -d

Conectar no DBeaver: Host 127.0.0.1, Port 3308 (do .env), DB appdb, User app, Senha app123.

. MySQL 8.4:

    docker compose --profile mysql up -d

Conectar: Host 127.0.0.1, Port 3307, DB appdb, User app, Senha app123.

. PostgreSQL 16:

    docker compose --profile postgres up -d

Conectar: Host 127.0.0.1, Port 5433, DB appdb, User app, Senha admin123.

Você pode mudar as portas no .env. Se quiser rodar mais de um banco ao mesmo tempo, basta garantir portas diferentes (como 
já estão).

Persistência dos dados:

Os dados ficam em volumes nomeados:

    MariaDB → mariadb_data

    MySQL → mysql_data

    PostgreSQL → postgres_data

Eles persistem mesmo se você fizer docker compose down.
Somente serão apagados se você rodar docker compose down -v (que remove volumes) ou docker volume rm ....


                                            Comandos úteis

. Ver status:

    docker container ls

    docker container ls -a

. Ver logs (até passar no healthcheck):

    docker compose logs -f

. Acessar o shell do banco:

    # MariaDB/MySQL
    docker exec -it mariadb11 mariadb -u root -p
    # ou
    docker exec -it mysql84 mysql -u root -p

    # PostgreSQL
    docker exec -it postgres16 psql -U app -d appdb

. Parar o banco atual:

    docker compose --profile mariadb down
    # (ou mysql / postgres)


. Parar todos os containers em execução

    docker stop $(docker ps -aq)


. Remover todos os containers

    docker rm $(docker ps -aq)


. Remover volumes associados (limpa os bancos)

    ATENÇÃO: Isso apaga todos os dados dos volumes.

    docker volume rm $(docker volume ls -q)

. (Opcional) Remover imagens também

    docker rmi $(docker images -q)

                                        
                                        Dicas rápidas no DBeaver


. Prefira Host: 127.0.0.1 (em vez de “localhost”).

. MariaDB/MySQL: se der erro de autenticação com usuários novos, crie-os dentro do container e dê privilégios:

    -- MariaDB/MySQL
    CREATE USER 'app'@'%' IDENTIFIED BY 'app123';
    GRANT ALL PRIVILEGES ON appdb.* TO 'app'@'%';
    FLUSH PRIVILEGES;

. PostgreSQL: usuários/DBs já vêm do .env. Para adicionais:

    CREATE USER dev WITH PASSWORD 'dev123';
    CREATE DATABASE devdb OWNER dev;


PS: Sempre desative ssl e habilite allowPublicKeyRetrieval, na área de driver properties do
dbeaver ou de outra ferramenta que usar

    allowPublicKeyRetrieval = true
    useSSL = false

                                    IMPORTANTE

Sempre dê o docker stop, e dpois o run:

    docker stop <name_container>

    docker start <name_container>

Se você remover o container mas mantiver o volume:

    docker rm mysql84


